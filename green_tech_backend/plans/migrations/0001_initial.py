# Generated by Django 4.2.7 on 2025-09-25 10:49

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("locations", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BuildRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "contact_name",
                    models.CharField(max_length=120, verbose_name="contact name"),
                ),
                (
                    "contact_email",
                    models.EmailField(max_length=254, verbose_name="contact email"),
                ),
                (
                    "contact_phone",
                    models.CharField(max_length=50, verbose_name="contact phone"),
                ),
                (
                    "budget_currency",
                    models.CharField(
                        default="USD", max_length=3, verbose_name="budget currency"
                    ),
                ),
                (
                    "budget_min",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="budget minimum",
                    ),
                ),
                (
                    "budget_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="budget maximum",
                    ),
                ),
                (
                    "timeline",
                    models.CharField(
                        blank=True, max_length=120, verbose_name="timeline"
                    ),
                ),
                (
                    "customizations",
                    models.TextField(blank=True, verbose_name="customizations"),
                ),
                (
                    "options",
                    models.JSONField(
                        blank=True, default=list, verbose_name="selected options"
                    ),
                ),
                (
                    "intake_data",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="intake data"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("in_review", "In review"),
                            ("contacted", "Contacted"),
                            ("archived", "Archived"),
                        ],
                        default="new",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="submitted at"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "ordering": ("-submitted_at",),
            },
        ),
        migrations.CreateModel(
            name="BuildRequestAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(blank=True, upload_to="build_requests/")),
                (
                    "storage_key",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="storage key"
                    ),
                ),
                (
                    "original_name",
                    models.CharField(max_length=200, verbose_name="original name"),
                ),
                (
                    "uploaded_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="uploaded at"),
                ),
            ],
            options={
                "ordering": ("uploaded_at",),
            },
        ),
        migrations.CreateModel(
            name="Plan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(max_length=120, unique=True, verbose_name="slug"),
                ),
                ("name", models.CharField(max_length=150, verbose_name="name")),
                (
                    "summary",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="summary"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "style",
                    models.CharField(
                        choices=[
                            ("modern", "Modern"),
                            ("contemporary", "Contemporary"),
                            ("bungalow", "Bungalow"),
                            ("villa", "Villa"),
                            ("townhouse", "Townhouse"),
                            ("traditional", "Traditional"),
                        ],
                        max_length=32,
                        verbose_name="style",
                    ),
                ),
                ("bedrooms", models.PositiveSmallIntegerField(verbose_name="bedrooms")),
                (
                    "bathrooms",
                    models.PositiveSmallIntegerField(verbose_name="bathrooms"),
                ),
                (
                    "floors",
                    models.PositiveSmallIntegerField(default=1, verbose_name="floors"),
                ),
                (
                    "area_sq_m",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=7,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("10"))
                        ],
                        verbose_name="area (sqm)",
                    ),
                ),
                (
                    "base_price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1000"))
                        ],
                        verbose_name="base price",
                    ),
                ),
                (
                    "base_currency",
                    models.CharField(
                        default="USD", max_length=3, verbose_name="base currency"
                    ),
                ),
                (
                    "has_garage",
                    models.BooleanField(default=False, verbose_name="has garage"),
                ),
                (
                    "energy_rating",
                    models.PositiveSmallIntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="energy rating",
                    ),
                ),
                (
                    "water_rating",
                    models.PositiveSmallIntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="water rating",
                    ),
                ),
                (
                    "sustainability_score",
                    models.PositiveSmallIntegerField(
                        default=60,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="sustainability score",
                    ),
                ),
                (
                    "hero_image_url",
                    models.URLField(blank=True, verbose_name="hero image url"),
                ),
                (
                    "specs",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="specifications"
                    ),
                ),
                (
                    "tags",
                    models.JSONField(blank=True, default=list, verbose_name="tags"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=True, verbose_name="is published"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="PlanRegionalPricing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cost_multiplier",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1.00"),
                        help_text="Multiplier applied on top of plan base price when estimating for this region",
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.10"))
                        ],
                        verbose_name="cost multiplier",
                    ),
                ),
                (
                    "currency_code",
                    models.CharField(
                        blank=True, max_length=3, verbose_name="currency code"
                    ),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pricing",
                        to="plans.plan",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="plan_pricing",
                        to="locations.region",
                    ),
                ),
            ],
            options={
                "verbose_name": "plan regional pricing",
                "verbose_name_plural": "plan regional pricing",
            },
        ),
        migrations.CreateModel(
            name="PlanOption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=120, verbose_name="name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "price_delta",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Additional cost when this option is selected",
                        max_digits=10,
                        verbose_name="price delta",
                    ),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="plans.plan",
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="PlanImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image_url", models.URLField(verbose_name="image url")),
                (
                    "caption",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="caption"
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(default=False, verbose_name="is primary"),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(default=0, verbose_name="order"),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="plans.plan",
                    ),
                ),
            ],
            options={
                "ordering": ("order", "id"),
            },
        ),
        migrations.CreateModel(
            name="PlanFeature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="category"
                    ),
                ),
                (
                    "is_sustainable",
                    models.BooleanField(default=False, verbose_name="is sustainable"),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="features",
                        to="plans.plan",
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.AddIndex(
            model_name="plan",
            index=models.Index(
                fields=["style", "bedrooms", "bathrooms"],
                name="plans_plan_style_51615d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="plan",
            index=models.Index(
                fields=["area_sq_m"], name="plans_plan_area_sq_99dd7f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="plan",
            index=models.Index(
                fields=["base_price"], name="plans_plan_base_pr_d4fa2b_idx"
            ),
        ),
        migrations.AddField(
            model_name="buildrequestattachment",
            name="request",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="attachments",
                to="plans.buildrequest",
            ),
        ),
        migrations.AddField(
            model_name="buildrequest",
            name="plan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="build_requests",
                to="plans.plan",
            ),
        ),
        migrations.AddField(
            model_name="buildrequest",
            name="region",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="build_requests",
                to="locations.region",
            ),
        ),
        migrations.AddField(
            model_name="buildrequest",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="build_requests",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterUniqueTogether(
            name="planregionalpricing",
            unique_together={("plan", "region")},
        ),
        migrations.AddConstraint(
            model_name="planimage",
            constraint=models.UniqueConstraint(
                fields=("plan", "order"), name="plan_image_unique_order"
            ),
        ),
        migrations.AddIndex(
            model_name="buildrequest",
            index=models.Index(fields=["status"], name="plans_build_status_02394d_idx"),
        ),
        migrations.AddIndex(
            model_name="buildrequest",
            index=models.Index(
                fields=["submitted_at"], name="plans_build_submitt_4d7448_idx"
            ),
        ),
    ]
